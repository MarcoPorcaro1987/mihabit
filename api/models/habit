const db = require('../dbConfig/init');


class Habit {
	constructor(data) {
		this.id = data.id;
		this.email = data.email;
		this.habitName = data.habit_name;
		this.description = data.habit_description;
		this.frequency = data.habit_frequency;
		this.frequencyTarget = data.frequency_target; 
		this.currentPeriod = data.currentPeriod;
		this.bestPeriod = data.bestPeriod;
		this.currentCompletions = data.currentCompletions;
        this.completionDates = data.completionDates;
	}


//show all habits
	static get all() {
		return new Promise(async (res, rej) => {
			try {
				let result = await db.query(`SELECT habits.*, users.username as username
												FROM habits
												JOIN users ON `)

				headers: {
					Authorization: `Bearer: ${localStorage.getItem('token')}`
				}

			} catch (err) {
				rej(`Error retrieving habits: ${ err }`)
			}
		})
		
	}




//create habit
	static create({ email, name, description, frequency, goal }) {
		return new Promise(async (res, rej) => {
			try {
				let result = await db.query(
					`INSERT INTO habits (email, habit_name, habit_description, habit_frequency, frequency_target) VALUES ($1, $2, $3, $4, $5) RETURNING *;`,
					[email, name, description, frequency, goal]
				);

				let completionDates = [];

				let habit = new Habit({
					...result.rows[0],
					completionDates,
					currentPeriod: 0,
					bestPeriod: 0,
				});
				res(habit);
			} catch (err) {
				rej(`Error creating habit: ${err}`);
			}
		});
	}

	
	// track a habit by id: to see if they have completed a habit for the day and see their most recent completion streak 
	static findById(id) {
		return new Promise(async (res, rej) => {
			try {
				let result = await db.query(`SELECT * FROM habits WHERE id = $1;`, [id]);
				if (result.rowCount === 0) {
					throw new Error('Habit not found');
				}
				let datesResult = await db.query(
					'SELECT * FROM completions WHERE habit_id = $1 ORDER BY completion_date;',
					[result.rows[0].id]
				);

				const completionDates = datesResult.rows;
				const periods = Habit.getPeriods(
					completionDates.map((data) => data.completion_date),
					result.rows[0].habit_frequency,
					result.rows[0].frequency_target
				);
				let habit = new Habit({
					...result.rows[0],
					completionDates,
					...periods,
				});
				res(habit);
			} catch (err) {
				console.log(err.message);
				rej(err);
			}
		});
	}

	
//delete a habit
	destroyHabit() {
		return new Promise(async (resolve, reject) => {
			try {
				await db.query(`DELETE FROM completions WHERE habit_id = $1;`, [this.id]);
				await db.query(`DELETE FROM habits WHERE id = $1;`, [this.id]);
				resolve('Habit was deleted');
			} catch (err) {
				reject('Habit could not be deleted');
			}
		});
	}
//function to get streaks//
	static getPeriods(completionDates, frequency, frequencyTarget) {

}
}
module.exports = Habit;
